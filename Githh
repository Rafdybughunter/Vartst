echo "# Vartst" >> README.md 
git init 
git add README.md 
git commit -m "primeiro commit" 
git branch -M main 
git remote add origin https://github.com/Rafdybughunter/Vartst.git
 git push -u origin main

from transformers import GPT2LMHeadModel, GPT2Tokenizer

# Carregar o modelo e o tokenizador
model_name = 'gpt2'  # ou 'gpt2-medium', 'gpt2-large', etc.
tokenizer = GPT2Tokenizer.from_pretrained(model_name)
model = GPT2LMHeadModel.from_pretrained(model_name)

# Função para gerar texto
def generate_text(prompt, max_length=50):
    inputs = tokenizer.encode(prompt, return_tensors='pt')
    outputs = model.generate(inputs, max_length=max_length, num_return_sequences=1)
    return tokenizer.decode(outputs[0], skip_special_tokens=True)

# Exemplo de uso
if __name__ == "__main__":
    prompt = "O que você acha do futuro da inteligência artificial?"
    generated = generate_text(prompt)
    print(generated)
from transformers import GPT2LMHeadModel, GPT2Tokenizer

# Carregar o modelo e o tokenizador
model_name = 'gpt2'  # ou 'gpt2-medium', 'gpt2-large', etc.
tokenizer = GPT2Tokenizer.from_pretrained(model_name)
model = GPT2LMHeadModel.from_pretrained(model_name)

# Função para gerar texto
def generate_text(prompt, max_length=50):
    inputs = tokenizer.encode(prompt, return_tensors='pt')
    outputs = model.generate(inputs, max_length=max_length, num_return_sequences=1)
    return tokenizer.decode(outputs[0], skip_special_tokens=True)

# Exemplo de uso
if __name__ == "__main__":
    prompt = "O que você acha do futuro da inteligência artificial?"
    generated = generate_text(prompt)
    print(generated)
from transformers import GPT2LMHeadModel, GPT2Tokenizer

# Carregar o modelo e o tokenizador
model_name = 'gpt2'  # ou 'gpt2-medium', 'gpt2-large', etc.
tokenizer = GPT2Tokenizer.from_pretrained(model_name)
model = GPT2LMHeadModel.from_pretrained(model_name)

# Função para gerar texto
def generate_text(prompt, max_length=50):
    inputs = tokenizer.encode(prompt, return_tensors='pt')
    outputs = model.generate(inputs, max_length=max_length, num_return_sequences=1)
    return tokenizer.decode(outputs[0], skip_special_tokens=True)

# Exemplo de uso
if __name__ == "__main__":
    prompt = "O que você acha do futuro da inteligência artificial?"
    generated = generate_text(prompt)
    print(generated)
from transformers import GPT2LMHeadModel, GPT2Tokenizer

# Carregar o modelo e o tokenizador
model_name = 'gpt2'  # ou 'gpt2-medium', 'gpt2-large', etc.
tokenizer = GPT2Tokenizer.from_pretrained(model_name)
model = GPT2LMHeadModel.from_pretrained(model_name)

# Função para gerar texto
def generate_text(prompt, max_length=50):
    inputs = tokenizer.encode(prompt, return_tensors='pt')
    outputs = model.generate(inputs, max_length=max_length, num_return_sequences=1)
    return tokenizer.decode(outputs[0], skip_special_tokens=True)

# Exemplo de uso
if __name__ == "__main__":
    prompt = "O que você acha do futuro da inteligência artificial?"
    generated = generate_text(prompt)
    print(generated)
from transformers import GPT2LMHeadModel, GPT2Tokenizer

# Carregar o modelo e o tokenizador
model_name = 'gpt2'  # ou 'gpt2-medium', 'gpt2-large', etc.
tokenizer = GPT2Tokenizer.from_pretrained(model_name)
model = GPT2LMHeadModel.from_pretrained(model_name)

# Função para gerar texto
def generate_text(prompt, max_length=50):
    inputs = tokenizer.encode(prompt, return_tensors='pt')
    outputs = model.generate(inputs, max_length=max_length, num_return_sequences=1)
    return tokenizer.decode(outputs[0], skip_special_tokens=True)

# Exemplo de uso
if __name__ == "__main__":
    prompt = "O que você acha do futuro da inteligência artificial?"
    generated = generate_text(prompt)
    print(generated)
from transformers import GPT2LMHeadModel, GPT2Tokenizer

# Carregar o modelo e o tokenizador
model_name = 'gpt2'  # ou 'gpt2-medium', 'gpt2-large', etc.
tokenizer = GPT2Tokenizer.from_pretrained(model_name)
model = GPT2LMHeadModel.from_pretrained(model_name)

# Função para gerar texto
def generate_text(prompt, max_length=50):
    inputs = tokenizer.encode(prompt, return_tensors='pt')
    outputs = model.generate(inputs, max_length=max_length, num_return_sequences=1)
    return tokenizer.decode(outputs[0], skip_special_tokens=True)

# Exemplo de uso
if __name__ == "__main__":
    prompt = "O que você acha do futuro da inteligência artificial?"
    generated = generate_text(prompt)
    print(generated)


from transformers import GPT2LMHeadModel, GPT2Tokenizer


# Carregar o modelo e o tokenizador
model_name = 'gpt2'  # ou 'gpt2-medium', 'gpt2-large', etc.
tokenizer = GPT2Tokenizer.from_pretrained(model_name)
model = GPT2LMHeadModel.from_pretrained(model_name)

# Função para gerar texto
def generate_text(prompt, max_length=50):
    inputs = tokenizer.encode(prompt, return_tensors='pt')
    outputs = model.generate(inputs, max_length=max_length, num_return_sequences=1)
    return tokenizer.decode(outputs[0], skip_special_tokens=True)

# Exemplo de uso
if __name__ == "__main__":
    prompt = "O que você acha do futuro da inteligência artificial?"
    generated = generate_text(prompt)
    print(generated)
